---
layout: post
comments: true
title:  "RInno 0.1.0"
subtitle: "flexdashboards and the registry"
date:   2017-08-18 12:05:19 -0500
authors: jon_hill
tags: R
header-img: "img/minnow.jpg"
permalink: /:title
---

Today, we are happy to announce RInno's first minor release. Over the past 5 months, RInno has been downloaded over 1200 times. Data scientists use it at the FDIC, the US Treasury and US Department of Agriculture among other organizations to install shiny apps on desktop computers. We have been getting weekly questions from the community about its features, and we even received our first question on [StackOverflow](https://stackoverflow.com/a/45700435/5490949). The most exciting development, however, is what led to today's minor release.

Hanjo Odendaal, a PhD student and data science consultant from South Africa, came to us with a question about how to install RStudio's newest dashboard package, [flexdashboard](http://rmarkdown.rstudio.com/flexdashboard/). He had a fully formed idea about how it could work, so I asked him if he'd like to implement it together. Over the past few months, he has been an incredibly thoughtful contributor to the project, and he is the chief visionary for this release.

At the same time, many of the issues submitted on [GitHub](https://github.com/ficonsulting/RInno/issues) were related to app start up instability problems in various shared computing envirnments and non-standard desktop configurations. Therefore, this release includes stability improvements, which are a combination of registry queries and improvements to the Inno Setup Scripts produced by RInno. This information will allow Data Scientists to focus on their work instead of fixing broken apps. It also brings RInno one step closer to being enterprise ready. IT can do what they want, for the most part, and RInno should be able to handle what they throw at it. 

Our next release will most likely include support for OAuth2 for advanced implementations that utilize RInno's [continuous installation](https://cran.r-project.org/web/packages/RInno/vignettes/cont-installation.html) methodology, but feel free add your thoughts in the comments section below or the issues section of GitHub. We will address community needs with each release, so please tell us about things you want RInno to support.

## Newest Feature - flexdashboard support

{% highlight r %}
# Create an example flexdashboard in the "app" directory
example_app(
	app_dir = "app", 
	type = "flexdashboard")
	
# Build an RInno installation framework w/ Pandoc
create_app(
	app_name = "myapp", 
	app_dir = "app", 
	include_Pandoc = TRUE) # See Pandoc Dependency section for details
	
# Compile the installer with Inno Setup
compile_iss()
{% endhighlight %}

If you are familiar with RInno, this should look almost exactly the same as compiling a shiny app installer. Hanjo has abstracted away the differences so that RInno supports flexdashboards behind the scenes. You don't need to change your workflow or learn too many new things to use RInno with your flexdashboards.

## Flexdashboards
Dubbed "easy interactive dashboards for R" by RStudio, flexdashboards are a hybrid between shiny apps and rmarkdown documents. You get the interactivity of a web application, with the statistical and data visualization power of R, managed via the simplicity of an rmarkdown document. Flexdashboards are an extremely powerful data science tool. At RStudio DevCon 2017, RStudio said that their long-term goal is to  make flexdashboards stand-alone html, css and JavaScript apps without an R server. This would make it possible to open them in a browser without R running and expand their audience in many business settings. I am incredibly excited about this project, and we will continue to look for ways to support it through RInno.

This NBA Scoring flexdashboard is a great example of the simplicity and power of these new applications. It includes a D3 JavaScript visualization and stat table, and it only requires 29 lines of rmarkdown code:

<iframe width="800" height="800" src="https://beta.rstudioconnect.com/jjallaire/htmlwidgets-d3heatmap/htmlwidgets-d3heatmap.html" frameborder="0" allowfullscreen></iframe>

You can see why the first thing Hanjo asked about RInno was: "Can I use flexdashboards?" Well, thanks to him, now you can.

### Flexdashboard Check
When `create_app` is called, RInno now runs Hanjo's `flexdashboard_check` to determine if your app is a flexdashboard. If it is, then `flexdashboard` and `rmarkdown` are added to your app's R package dependency list and RInno prints a message to the R console to communicate its findings.

{% highlight r %}
This flexdashboard will be used:
 - example.Rmd
{% endhighlight %}

### Pandoc Dependency
As many of you probably know, rmarkdown uses a universal document conversion tool called Pandoc to convert rmarkdown documents into pdf, html and Microsoft Word documents among other things. We decided to handle the Pandoc dependency like R itself. There are two arguments to manage it. The first, `include_Pandoc`, is a boolean argument that tells RInno to include Pandoc in your app's installation. The second, `Pandoc_version`, is the version of Pandoc to include. It defaults to the version of Pandoc used by the rmarkdown package in order to ensure that it is the same version of Pandoc used to develop the dashboard, but you can give it other versions if you want.

Similar to the way that RInno handles R, it only installs Pandoc if a computer does not have a registry entry for Pandoc. Once the installation is complete, RInno queries the registry for Pandoc's installation path and uses it to kick off the flexdashboard. Keep in mind, this is not a version specific check because Pandoc does not have version information in its registry entry. As a result, one difference between the Pandoc check and the R check is that if users have a different version of Pandoc installed on their computers, this check will find it, regardless of its version, and not include the version of Pandoc included with the RInno installer. We may have to release some patches to handle this differently at some point in the near future.

## The Registry
We added over 100 lines of custom Delphi Pascal code (below) which queries the registry and customizes installations on each machine. The helper functions determine if R and/or Pandoc are needed and modify the post installation step of Inno Setup to write a JSON file in each app's utils folder called "regpaths.json" (the old-school programmer in you should appreciate seeing JSON created by Delphi Pascal, which predates JSON by a few decades). This file is accessed throughout the start up sequence to ensure that dependencies are where we think they are.

As we mentioned earlier, there has been a decent amount of interest in using shared machines to install shiny apps using RInno. A few people have tested this new methodology on shared machines and found it worked out of the box, so that is a promising sign if you are interested in doing something similar at your organization.

### Pascal - code.iss
This section is for the software engineer in you. If you are not curious about how the sausage is made, skip to the final thoughts section below. 

First, we created constants for each of the easy registry entries (R, Chrome, Internet Explorer, and Firefox), and a variable for the registry JSON file.
{% highlight Pascal %}
[Code]
const
  RRegKey = 'Software\R-Core\R\{#RVersion}';
  ChromeRegKey = 'Software\Microsoft\Windows\CurrentVersion\App Paths\chrome.exe';
  IERegKey = 'Software\Microsoft\Windows\CurrentVersion\App Paths\IEXPLORE.EXE';
  FFRegKey = 'Software\Microsoft\Windows\CurrentVersion\App Paths\firefox.exe';
var
  RegPathsFile: string;
{% endhighlight %}

We created a series of boolean helper functions which are called using the [Check](http://www.jrsoftware.org/ishelp/index.php?topic=scriptcheck) parameter of Inno Setup. This makes it possible to copy and run the R and Pandoc executables if the registry query is successful.

{% highlight Pascal %}
// Is R installed?
function RDetected(): boolean;
var
  success: boolean;
begin
  success := RegKeyExists(HKLM, RRegKey) or RegKeyExists(HKCU, RRegKey);
  begin
    Result := success;
  end;
end;

// If R is not detected, it is needed
function RNeeded(): Boolean;
begin
  Result := (RDetected = false);
end;
{% endhighlight %}

Pandoc's registry entry is packed into the System PATH without the same level of specificity as the others. Detecting Pandoc is, therefore, a bit more challenging. First, Pandoc's registry entry varies on every machine because it includes the user's name. Luckily, Inno Setup has a constant called `{localappdata}`, which can be expanded into that unique entry (`PandocDir`). After that, it is possible to use the Pascal string function `Pos` to determine if that unique string has been crammed into the system path.

{% highlight Pascal %}
// Pandoc is stored in the System PATH
function PandocDetected(): Boolean;
var
  PandocDir, Path: String;
begin
  Log('Checking for Pandoc in %PATH%');
  if RegQueryStringValue(HKEY_CURRENT_USER, 'Environment', 'Path', Path) then
  begin // Successfully read the value
    Log('HKCU\Environment\PATH = ' + Path);
    PandocDir := ExpandConstant('{localappdata}\Pandoc\');
    Log('Looking for Pandoc in %PATH%: ' + PandocDir + ' in ' + Path);
    if Pos(LowerCase(PandocDir), Lowercase(Path)) = 0 then
    begin
      Log('Did not find Pandoc in %PATH%');
      Result := False;
    end
    else
    begin
      Log('Found Pandoc in %PATH%');
      Result := True;
    end
  end
  else // The key probably doesn't exist
  begin
    Log('Could not access HKCU\Environment\PATH.');
    Result := False;
  end;
end;

// If Pandoc is not detected, it is needed
function PandocNeeded(): Boolean;
begin
  Result := (PandocDetected = false);
end;
{% endhighlight %}

JScript (run.js) does not like the single slashes created by Pascal, so we use this helper function to convert each of the installation paths into paths that JScript likes.

{% highlight Pascal %}
// Registry path update function (adds an extra backslash for json)
function AddBackSlash(Value: string): string;
begin
  Result := Value;
  StringChangeEx(Result, '\', '\\', True);
end;
{% endhighlight %}

Finally, `CurStepChanged` is a standard Inno Setup function that you can modify to customize various steps of the installation process. We want to run some queries at the end of the installation and save the results to disk using JSON. The methodology is very similar for each program. If the registry query finds something, save it to the registry file. Otherwise, save "none" in its place.

{% highlight Pascal %}
// Save installation paths to JSON
procedure CurStepChanged(CurStep: TSetupStep);
var
  RPath, ChromePath, IEPath, FFPath, PandocPath: string;
begin
if CurStep = ssPostInstall then begin
    RPath := '';
    ChromePath := '';
    IEPath := '';
    FFPath := '';
		PandocPath := ExpandConstant('{localappdata}\Pandoc\');
    RegPathsFile := ExpandConstant('{app}\utils\regpaths.json');
    // Create registry paths file
    SaveStringToFile(RegPathsFile, '{' + #13#10, True);

    // R RegPath
    if RegQueryStringValue(HKLM, RRegKey, 'InstallPath', RPath) or RegQueryStringValue(HKCU, RRegKey, 'InstallPath', RPath) then
      SaveStringToFile(RegPathsFile, '"r": "' + AddBackSlash(RPath) + '",' + #13#10, True)
    else
      SaveStringToFile(RegPathsFile, '"r": "none",' + #13#10, True);

    // Chrome RegPath
    if RegQueryStringValue(HKLM, ChromeRegKey, 'Path', ChromePath) then
      SaveStringToFile(RegPathsFile, '"chrome": "' + AddBackSlash(ChromePath) + '",' + #13#10, True)
    else
      SaveStringToFile(RegPathsFile, '"chrome": "none",' + #13#10, True);

    // Internet Explorer RegPath
    if RegQueryStringValue(HKLM, IERegKey, '', IEPath) then
      SaveStringToFile(RegPathsFile, '"ie": "' + AddBackSlash(IEPath) + '",' + #13#10, True)
    else
      SaveStringToFile(RegPathsFile, '"ie": "none",' + #13#10, True);

    // Firefox RegPath
    if RegQueryStringValue(HKLM, FFRegKey, 'Path', FFPath) then
      SaveStringToFile(RegPathsFile, '"ff": "' + AddBackSlash(FFPath) + '",' + #13#10, True)
    else
      SaveStringToFile(RegPathsFile, '"ff": "none",' + #13#10, True);

    // Pandoc RegPath
    // ** Last Line in json file (no trailing comma) **
    if PandocDetected() then
      SaveStringToFile(RegPathsFile, '"pandoc": "' + AddBackSlash(PandocPath) + '"' + #13#10, True)
    else
      SaveStringToFile(RegPathsFile, '"pandoc": "none"' + #13#10, True);
  SaveStringToFile(RegPathsFile, '}', True);
  end;
end;
{% endhighlight %}

It was pretty exciting to get this working because we are writing JSON to disk that JScript can read to kick off R. Once R is running, we can set the browser and tell R where we put Pandoc. Previously, JScript was doing some guess-and-check to find R and R was doing some guess-and-check to find the browser. Now, we hit the registry and use it. Otherwise, try to fail gracefully with the "none" cases.

## Final Thoughts
Besides improving the authentication of continuous installations, we are thinking about ways to use `packrat` to isolate RInno-installed apps from the user's R package library. This and other ideas are still in their nascent stages, but I am very excited to have Hanjo on the team. If you are thinking you're not qualified to contribute, that is simply false. I was a political science major who minored in economics and women and gender studies. I spent the first half of my career working in the non-profit industry doing project management and social work... I don't speak the lingo of a computer scientist and only started programming in 2013. I am sure we could use your help.